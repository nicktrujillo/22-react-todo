{"version":3,"sources":["redux/actionTypes.js","components/AddTodo.js","redux/actions.js","components/TodoList.js","components/VisibilityFilter.js","redux/reducers.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Filters","connect","addTodo","content","type","payload","useState","value","setValue","id","onChange","e","target","placeholder","onClick","window","location","reload","Todo","todo","toggleTodo","className","completed","state","visibilityFilter","activeFilter","todos","data","_","pick","keys","map","key","setFilter","filter","i","initialTodoState","nextId","createStore","combineReducers","action","console","log","__REDUX_DEVTOOLS_EXTENSION__","App","store","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70a4c120.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";\n\nexport const FILTER_ALL = \"all\";\nexport const FILTER_COMPLETED = \"completed\";\nexport const FILTER_INCOMPLETE = \"incomplete\";\nexport const Filters = [FILTER_ALL, FILTER_COMPLETED, FILTER_INCOMPLETE];\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions\";\n\nfunction AddTodo({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleOnChange = (e) => {\n    setValue(e.target.value);\n  };\n  const handleAdd = () => {\n    setValue(\"\");\n    addTodo(value);\n  };\n  const handleClear = () => {\n    window.location.reload();\n  };\n\n  return (\n    <>\n      <input\n        id=\"new-todo\"\n        type=\"text\"\n        onChange={handleOnChange}\n        value={value}\n        placeholder=\"new todo\"\n      />\n      <button id=\"add-todo\" onClick={handleAdd}>\n        add\n      </button>\n      <button id=\"clear\" onClick={handleClear}>\n        clear all\n      </button>\n    </>\n  );\n}\n\nexport default connect(null, { addTodo })(AddTodo);\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO, SET_FILTER } from \"./actionTypes\";\n\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: { content },\n});\n\nexport const toggleTodo = (id) => ({\n  type: TOGGLE_TODO,\n  payload: { id },\n});\n\nexport const deleteTodo = (id) => ({\n  type: DELETE_TODO,\n  payload: { id },\n});\n\nexport const setFilter = (filter) => ({\n  type: SET_FILTER,\n  payload: { filter },\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport _ from \"underscore\";\nimport { FILTER_ALL, FILTER_COMPLETED } from \"../redux/actionTypes\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = ({ todo, id, toggleTodo }) => (\n  <li\n    id=\"list-item\"\n    className={todo.completed ? \"completed\" : \"\"}\n    onClick={() => toggleTodo(id)}\n  >\n    {todo.content}\n  </li>\n);\n\nfunction TodoList({ todos, toggleTodo }) {\n  return _.keys(todos).map((id) => (\n    <Todo key={id} id={id} toggleTodo={toggleTodo} todo={todos[id]} />\n  ));\n}\n\nconst mapState = (state) => {\n  if (state.visibilityFilter.activeFilter === FILTER_ALL) {\n    return { todos: state.todos.data };\n  } else if (state.visibilityFilter.activeFilter === FILTER_COMPLETED) {\n    return {\n      todos: _.pick(state.todos.data, (todo) => todo.completed),\n    };\n  } else {\n    return {\n      todos: _.pick(state.todos.data, (todo) => !todo.completed),\n    };\n  }\n};\n\nexport default connect(mapState, { toggleTodo })(TodoList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\nimport { Filters } from \"../redux/actionTypes\";\n\nfunction VisibilityFilter({ activeFilter, setFilter }) {\n  return Filters.map((filter, i) => (\n    <button\n      id=\"filter-button\"\n      className={filter === activeFilter ? \"active\" : \"\"}\n      onClick={() => setFilter(filter)}\n      key={`filter-${i}`}\n    >\n      {filter}\n    </button>\n  ));\n}\n\nconst mapState = (state) => ({\n  activeFilter: state.visibilityFilter.activeFilter,\n});\nexport default connect(mapState, { setFilter })(VisibilityFilter);\n","import { FILTER_ALL } from \"./actionTypes\";\nimport { ADD_TODO, TOGGLE_TODO, DELETE_TODO, SET_FILTER } from \"./actionTypes\";\n\nconst initialTodoState = {\n  nextId: 2,\n  data: {},\n};\n\nexport const todos = (state = initialTodoState, action) => {\n  switch (action.type) {\n    case ADD_TODO: {\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [state.nextId]: {\n            completed: false,\n            content: action.payload.content,\n          },\n        },\n\n        nextId: state.nextId + 1,\n      };\n    }\n    case TOGGLE_TODO: {\n      console.log(action.payload);\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.payload.id]: {\n            ...state.data[action.payload.id],\n            completed: !state.data[action.payload.id].completed,\n          },\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport const visibilityFilter = (\n  state = { activeFilter: FILTER_ALL },\n  action\n) => {\n  switch (action.type) {\n    case SET_FILTER: {\n      return {\n        activeFilter: action.payload.filter,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { createStore, combineReducers } from \"redux\";\nimport { todos, visibilityFilter } from \"./reducers\";\n\nexport default createStore(\n  combineReducers({ todos, visibilityFilter }),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","// import React from \"react\";\n// import { Provider } from \"react-redux\";\n// import \"./App.css\";\n// import store from \"./store.js\";\n// import TodoApp from \"./components/TodoApp\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport VisibilityFilter from \"./components/VisibilityFilter\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <h1>ToDo ðŸ“’</h1>\n        <div id=\"filter\">\n          <VisibilityFilter />\n        </div>\n        <div id=\"new\">\n          <AddTodo />\n        </div>\n        <div id=\"list\">\n          <TodoList />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\n// function App() {\n//   return (\n//     <Provider store={store}>\n//       <TodoApp />\n//     </Provider>\n//   )\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}